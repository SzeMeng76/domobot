services:
  # MySQL 服务
  mysql:
    image: mysql:8.0
    container_name: appbot-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - appbot-network
    ports:
      - "3306:3306"

  # Redis 服务
  redis:
    image: redis:7-alpine
    container_name: appbot-redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - appbot-network
  
  # 服务名称，可以自定义，这里我们叫它 appbot。
  appbot:
    image: domomido/appbot:latest

    # --- 容器配置 ---
    # 给容器一个固定的名字，方便管理。
    container_name: appbot
    # 设置重启策略为 "always"，这样容器在意外退出时会自动重启。
    restart: always
    
    # --- 环境变量 ---
    # 从项目根目录下的 .env 文件中加载环境变量。
    # 这是您要求的核心功能之一。
    env_file:
      - .env
    environment:
      - TZ=Asia/Shanghai
      - REDIS_HOST=redis  # 使用服务名作为主机名
      - DB_HOST=mysql     # 使用服务名作为主机名
      
    # --- 端口映射 ---
    # 将主机的 8443 端口映射到容器的 8443 端口。
    # 格式是 "主机端口:容器端口"。
    ports:
      - "8443:8443"
      
    # --- 卷（目录）映射 ---
    # 将当前目录（.）挂载到容器内的 /app 目录。
    # 这意味着您在本地对代码的任何修改，都会立即反映在运行的容器中，
    # 无需重新构建镜像，极大地提高了开发效率。
    volumes:
      - .:/app
    
    # --- 网络配置 ---
    networks:
      - appbot-network
    
    # --- 依赖配置 ---
    depends_on:
      - mysql
      - redis

# 定义网络
networks:
  appbot-network:
    driver: bridge

# 定义卷
volumes:
  mysql_data:
  redis_data:
